if(BuildJIT)
    add_definitions(-D_ENABLE_DYNAMIC_THUNKS=1)
endif()

if(CC_TARGETS_AMD64)
    set(Wasm_dep
    WASM/WabtInterface.cpp
    WASM/WasmLibrary.cpp
    WASM/WebAssembly.cpp
    WASM/WebAssemblyEnvironment.cpp
    WASM/WebAssemblyInstance.cpp
    WASM/WebAssemblyMemory.cpp
    WASM/WebAssemblyModule.cpp
    WASM/WebAssemblyTable.cpp
    )
endif()

if(CAN_BUILD_WABT)
    include_directories(
    ../../wabt/chakra
    ./WASM
    )
endif()

include_directories(
./Array
./Functions
./Generators
./Iterators
./JSON
./Regex
./String
)

set(CRLIB_SOURCE_CODES
    ArgumentsObject.cpp
    ArgumentsObjectEnumerator.cpp
    ArrayBuffer.cpp
    Array/ES5Array.cpp
    Array/ES5ArrayIndexEnumerator.cpp
    Array/JavascriptArray.cpp
    Array/JavascriptArrayIndexEnumerator.cpp
    Array/JavascriptArrayIndexEnumeratorBase.cpp
    Array/JavascriptArrayIndexSnapshotEnumerator.cpp
    Array/SparseArraySegment.cpp
    Array/TypedArray.cpp
    Array/TypedArrayIndexEnumerator.cpp
    AtomicsObject.cpp
    AtomicsOperations.cpp
    CommonExternalApiImpl.cpp
    CustomExternalWrapperObject.cpp
    DataView.cpp
    DateImplementation.cpp
    DelayFreeArrayBufferHelper.cpp
    EngineInterfaceObject.cpp
    ExternalLibraryBase.cpp
    ForInObjectEnumerator.cpp
    Functions/BoundFunction.cpp
    Functions/JavascriptExternalFunction.cpp
    Functions/JavascriptFunction.cpp
    Functions/RuntimeFunction.cpp
    Functions/ScriptFunction.cpp
    Functions/StackScriptFunction.cpp
    Generators/JavascriptAsyncFunction.cpp
    Generators/JavascriptAsyncGenerator.cpp
    Generators/JavascriptAsyncGeneratorFunction.cpp
    Generators/JavascriptGenerator.cpp
    Generators/JavascriptGeneratorFunction.cpp
    GlobalObject.cpp
    IntlEngineInterfaceExtensionObject.cpp
    Iterators/CustomExternalIterator.cpp
    Iterators/JavascriptArrayIterator.cpp
    Iterators/JavascriptAsyncFromSyncIterator.cpp
    Iterators/JavascriptIterator.cpp
    Iterators/JavascriptListIterator.cpp
    Iterators/JavascriptMapIterator.cpp
    Iterators/JavascriptSetIterator.cpp
    JSON/JSON.cpp
    JSON/JSONParser.cpp
    JSON/JSONScanner.cpp
    JSON/JSONStack.cpp
    JSON/JSONStringBuilder.cpp
    JSON/JSONStringifier.cpp
    JSON/LazyJSONString.cpp
    JavascriptBigInt.cpp
    JavascriptBigIntObject.cpp
    JavascriptBoolean.cpp
    JavascriptBooleanObject.cpp
    JavascriptBuiltInFunctions.cpp
    JavascriptDate.cpp
    JavascriptError.cpp
    JavascriptExceptionMetadata.cpp
    JavascriptLibrary.cpp
    JavascriptMap.cpp
    JavascriptNumber.cpp
    JavascriptNumberObject.cpp
    JavascriptObject.cpp
    JavascriptPromise.cpp
    JavascriptProxy.cpp
    JavascriptReflect.cpp
    JavascriptSet.cpp
    JavascriptSymbol.cpp
    JavascriptSymbolObject.cpp
    JavascriptTypedNumber.cpp
    JavascriptWeakMap.cpp
    JavascriptWeakSet.cpp
    JsBuiltInEngineInterfaceExtensionObject.cpp
    MathLibrary.cpp
    ModuleRoot.cpp
    ObjectPrototypeObject.cpp
    PropertyRecordUsageCache.cpp
    Regex/JavascriptRegExpConstructor.cpp
    Regex/JavascriptRegExpEnumerator.cpp
    Regex/JavascriptRegularExpression.cpp
    Regex/JavascriptRegularExpressionResult.cpp
    Regex/RegexHelper.cpp
    RootObjectBase.cpp
    RuntimeLibraryPch.cpp
    SharedArrayBuffer.cpp
    String/BufferStringBuilder.cpp
    String/CompoundString.cpp
    String/ConcatString.cpp
    String/JavascriptString.cpp
    String/JavascriptStringEnumerator.cpp
    String/JavascriptStringIterator.cpp
    String/JavascriptStringObject.cpp
    String/LiteralString.cpp
    String/ProfileString.cpp
    String/PropertyString.cpp
    String/SingleCharString.cpp
    String/StringCopyInfo.cpp
    String/SubString.cpp
    ThrowErrorObject.cpp
    UriHelper.cpp
    VerifyMarkFalseReference.cpp
    ${Wasm_dep}
    )

if(CC_TARGETS_AMD64)
    set (CRLIB_SOURCE_CODES ${CRLIB_SOURCE_CODES}
        amd64/JavascriptFunctionA.S
    )
elseif(CC_TARGETS_ARM)
    set (CRLIB_SOURCE_CODES ${CRLIB_SOURCE_CODES}
        arm/arm_JavascriptFunctionA.S
    )
endif()

add_library (Chakra.Runtime.Library OBJECT ${CRLIB_SOURCE_CODES})

target_include_directories (
    Chakra.Runtime.Library PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
